// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: log/v1/log.proto

package logv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taimats/bunsan/gen/log/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LogName is the fully-qualified name of the Log service.
	LogName = "log.v1.Log"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LogProduceProcedure is the fully-qualified name of the Log's Produce RPC.
	LogProduceProcedure = "/log.v1.Log/Produce"
	// LogConsumeProcedure is the fully-qualified name of the Log's Consume RPC.
	LogConsumeProcedure = "/log.v1.Log/Consume"
	// LogProduceStreamProcedure is the fully-qualified name of the Log's ProduceStream RPC.
	LogProduceStreamProcedure = "/log.v1.Log/ProduceStream"
	// LogConsumeStreamProcedure is the fully-qualified name of the Log's ConsumeStream RPC.
	LogConsumeStreamProcedure = "/log.v1.Log/ConsumeStream"
)

// LogClient is a client for the log.v1.Log service.
type LogClient interface {
	Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error)
	Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error)
	ProduceStream(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.ServerStreamForClient[v1.ProduceResponse], error)
	ConsumeStream(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.ServerStreamForClient[v1.ConsumeResponse], error)
}

// NewLogClient constructs a client for the log.v1.Log service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LogClient {
	baseURL = strings.TrimRight(baseURL, "/")
	logMethods := v1.File_log_v1_log_proto.Services().ByName("Log").Methods()
	return &logClient{
		produce: connect.NewClient[v1.ProduceRequest, v1.ProduceResponse](
			httpClient,
			baseURL+LogProduceProcedure,
			connect.WithSchema(logMethods.ByName("Produce")),
			connect.WithClientOptions(opts...),
		),
		consume: connect.NewClient[v1.ConsumeRequest, v1.ConsumeResponse](
			httpClient,
			baseURL+LogConsumeProcedure,
			connect.WithSchema(logMethods.ByName("Consume")),
			connect.WithClientOptions(opts...),
		),
		produceStream: connect.NewClient[v1.ProduceRequest, v1.ProduceResponse](
			httpClient,
			baseURL+LogProduceStreamProcedure,
			connect.WithSchema(logMethods.ByName("ProduceStream")),
			connect.WithClientOptions(opts...),
		),
		consumeStream: connect.NewClient[v1.ConsumeRequest, v1.ConsumeResponse](
			httpClient,
			baseURL+LogConsumeStreamProcedure,
			connect.WithSchema(logMethods.ByName("ConsumeStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// logClient implements LogClient.
type logClient struct {
	produce       *connect.Client[v1.ProduceRequest, v1.ProduceResponse]
	consume       *connect.Client[v1.ConsumeRequest, v1.ConsumeResponse]
	produceStream *connect.Client[v1.ProduceRequest, v1.ProduceResponse]
	consumeStream *connect.Client[v1.ConsumeRequest, v1.ConsumeResponse]
}

// Produce calls log.v1.Log.Produce.
func (c *logClient) Produce(ctx context.Context, req *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error) {
	return c.produce.CallUnary(ctx, req)
}

// Consume calls log.v1.Log.Consume.
func (c *logClient) Consume(ctx context.Context, req *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error) {
	return c.consume.CallUnary(ctx, req)
}

// ProduceStream calls log.v1.Log.ProduceStream.
func (c *logClient) ProduceStream(ctx context.Context, req *connect.Request[v1.ProduceRequest]) (*connect.ServerStreamForClient[v1.ProduceResponse], error) {
	return c.produceStream.CallServerStream(ctx, req)
}

// ConsumeStream calls log.v1.Log.ConsumeStream.
func (c *logClient) ConsumeStream(ctx context.Context, req *connect.Request[v1.ConsumeRequest]) (*connect.ServerStreamForClient[v1.ConsumeResponse], error) {
	return c.consumeStream.CallServerStream(ctx, req)
}

// LogHandler is an implementation of the log.v1.Log service.
type LogHandler interface {
	Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error)
	Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error)
	ProduceStream(context.Context, *connect.Request[v1.ProduceRequest], *connect.ServerStream[v1.ProduceResponse]) error
	ConsumeStream(context.Context, *connect.Request[v1.ConsumeRequest], *connect.ServerStream[v1.ConsumeResponse]) error
}

// NewLogHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogHandler(svc LogHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	logMethods := v1.File_log_v1_log_proto.Services().ByName("Log").Methods()
	logProduceHandler := connect.NewUnaryHandler(
		LogProduceProcedure,
		svc.Produce,
		connect.WithSchema(logMethods.ByName("Produce")),
		connect.WithHandlerOptions(opts...),
	)
	logConsumeHandler := connect.NewUnaryHandler(
		LogConsumeProcedure,
		svc.Consume,
		connect.WithSchema(logMethods.ByName("Consume")),
		connect.WithHandlerOptions(opts...),
	)
	logProduceStreamHandler := connect.NewServerStreamHandler(
		LogProduceStreamProcedure,
		svc.ProduceStream,
		connect.WithSchema(logMethods.ByName("ProduceStream")),
		connect.WithHandlerOptions(opts...),
	)
	logConsumeStreamHandler := connect.NewServerStreamHandler(
		LogConsumeStreamProcedure,
		svc.ConsumeStream,
		connect.WithSchema(logMethods.ByName("ConsumeStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/log.v1.Log/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LogProduceProcedure:
			logProduceHandler.ServeHTTP(w, r)
		case LogConsumeProcedure:
			logConsumeHandler.ServeHTTP(w, r)
		case LogProduceStreamProcedure:
			logProduceStreamHandler.ServeHTTP(w, r)
		case LogConsumeStreamProcedure:
			logConsumeStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLogHandler returns CodeUnimplemented from all methods.
type UnimplementedLogHandler struct{}

func (UnimplementedLogHandler) Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.Log.Produce is not implemented"))
}

func (UnimplementedLogHandler) Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.Log.Consume is not implemented"))
}

func (UnimplementedLogHandler) ProduceStream(context.Context, *connect.Request[v1.ProduceRequest], *connect.ServerStream[v1.ProduceResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.Log.ProduceStream is not implemented"))
}

func (UnimplementedLogHandler) ConsumeStream(context.Context, *connect.Request[v1.ConsumeRequest], *connect.ServerStream[v1.ConsumeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.Log.ConsumeStream is not implemented"))
}
