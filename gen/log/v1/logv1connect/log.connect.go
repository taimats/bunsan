// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: log/v1/log.proto

package logv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taimats/bunsan/gen/log/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LogServiceName is the fully-qualified name of the LogService service.
	LogServiceName = "log.v1.LogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LogServiceProduceProcedure is the fully-qualified name of the LogService's Produce RPC.
	LogServiceProduceProcedure = "/log.v1.LogService/Produce"
	// LogServiceConsumeProcedure is the fully-qualified name of the LogService's Consume RPC.
	LogServiceConsumeProcedure = "/log.v1.LogService/Consume"
	// LogServiceProduceBidiStreamProcedure is the fully-qualified name of the LogService's
	// ProduceBidiStream RPC.
	LogServiceProduceBidiStreamProcedure = "/log.v1.LogService/ProduceBidiStream"
	// LogServiceConsumeServerStreamProcedure is the fully-qualified name of the LogService's
	// ConsumeServerStream RPC.
	LogServiceConsumeServerStreamProcedure = "/log.v1.LogService/ConsumeServerStream"
)

// LogServiceClient is a client for the log.v1.LogService service.
type LogServiceClient interface {
	Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error)
	Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error)
	ProduceBidiStream(context.Context) *connect.BidiStreamForClient[v1.ProduceBidiStreamRequest, v1.ProduceBidiStreamResponse]
	ConsumeServerStream(context.Context, *connect.Request[v1.ConsumeServerStreamRequest]) (*connect.ServerStreamForClient[v1.ConsumeServerStreamResponse], error)
}

// NewLogServiceClient constructs a client for the log.v1.LogService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	logServiceMethods := v1.File_log_v1_log_proto.Services().ByName("LogService").Methods()
	return &logServiceClient{
		produce: connect.NewClient[v1.ProduceRequest, v1.ProduceResponse](
			httpClient,
			baseURL+LogServiceProduceProcedure,
			connect.WithSchema(logServiceMethods.ByName("Produce")),
			connect.WithClientOptions(opts...),
		),
		consume: connect.NewClient[v1.ConsumeRequest, v1.ConsumeResponse](
			httpClient,
			baseURL+LogServiceConsumeProcedure,
			connect.WithSchema(logServiceMethods.ByName("Consume")),
			connect.WithClientOptions(opts...),
		),
		produceBidiStream: connect.NewClient[v1.ProduceBidiStreamRequest, v1.ProduceBidiStreamResponse](
			httpClient,
			baseURL+LogServiceProduceBidiStreamProcedure,
			connect.WithSchema(logServiceMethods.ByName("ProduceBidiStream")),
			connect.WithClientOptions(opts...),
		),
		consumeServerStream: connect.NewClient[v1.ConsumeServerStreamRequest, v1.ConsumeServerStreamResponse](
			httpClient,
			baseURL+LogServiceConsumeServerStreamProcedure,
			connect.WithSchema(logServiceMethods.ByName("ConsumeServerStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// logServiceClient implements LogServiceClient.
type logServiceClient struct {
	produce             *connect.Client[v1.ProduceRequest, v1.ProduceResponse]
	consume             *connect.Client[v1.ConsumeRequest, v1.ConsumeResponse]
	produceBidiStream   *connect.Client[v1.ProduceBidiStreamRequest, v1.ProduceBidiStreamResponse]
	consumeServerStream *connect.Client[v1.ConsumeServerStreamRequest, v1.ConsumeServerStreamResponse]
}

// Produce calls log.v1.LogService.Produce.
func (c *logServiceClient) Produce(ctx context.Context, req *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error) {
	return c.produce.CallUnary(ctx, req)
}

// Consume calls log.v1.LogService.Consume.
func (c *logServiceClient) Consume(ctx context.Context, req *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error) {
	return c.consume.CallUnary(ctx, req)
}

// ProduceBidiStream calls log.v1.LogService.ProduceBidiStream.
func (c *logServiceClient) ProduceBidiStream(ctx context.Context) *connect.BidiStreamForClient[v1.ProduceBidiStreamRequest, v1.ProduceBidiStreamResponse] {
	return c.produceBidiStream.CallBidiStream(ctx)
}

// ConsumeServerStream calls log.v1.LogService.ConsumeServerStream.
func (c *logServiceClient) ConsumeServerStream(ctx context.Context, req *connect.Request[v1.ConsumeServerStreamRequest]) (*connect.ServerStreamForClient[v1.ConsumeServerStreamResponse], error) {
	return c.consumeServerStream.CallServerStream(ctx, req)
}

// LogServiceHandler is an implementation of the log.v1.LogService service.
type LogServiceHandler interface {
	Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error)
	Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error)
	ProduceBidiStream(context.Context, *connect.BidiStream[v1.ProduceBidiStreamRequest, v1.ProduceBidiStreamResponse]) error
	ConsumeServerStream(context.Context, *connect.Request[v1.ConsumeServerStreamRequest], *connect.ServerStream[v1.ConsumeServerStreamResponse]) error
}

// NewLogServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogServiceHandler(svc LogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	logServiceMethods := v1.File_log_v1_log_proto.Services().ByName("LogService").Methods()
	logServiceProduceHandler := connect.NewUnaryHandler(
		LogServiceProduceProcedure,
		svc.Produce,
		connect.WithSchema(logServiceMethods.ByName("Produce")),
		connect.WithHandlerOptions(opts...),
	)
	logServiceConsumeHandler := connect.NewUnaryHandler(
		LogServiceConsumeProcedure,
		svc.Consume,
		connect.WithSchema(logServiceMethods.ByName("Consume")),
		connect.WithHandlerOptions(opts...),
	)
	logServiceProduceBidiStreamHandler := connect.NewBidiStreamHandler(
		LogServiceProduceBidiStreamProcedure,
		svc.ProduceBidiStream,
		connect.WithSchema(logServiceMethods.ByName("ProduceBidiStream")),
		connect.WithHandlerOptions(opts...),
	)
	logServiceConsumeServerStreamHandler := connect.NewServerStreamHandler(
		LogServiceConsumeServerStreamProcedure,
		svc.ConsumeServerStream,
		connect.WithSchema(logServiceMethods.ByName("ConsumeServerStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/log.v1.LogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LogServiceProduceProcedure:
			logServiceProduceHandler.ServeHTTP(w, r)
		case LogServiceConsumeProcedure:
			logServiceConsumeHandler.ServeHTTP(w, r)
		case LogServiceProduceBidiStreamProcedure:
			logServiceProduceBidiStreamHandler.ServeHTTP(w, r)
		case LogServiceConsumeServerStreamProcedure:
			logServiceConsumeServerStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLogServiceHandler struct{}

func (UnimplementedLogServiceHandler) Produce(context.Context, *connect.Request[v1.ProduceRequest]) (*connect.Response[v1.ProduceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.LogService.Produce is not implemented"))
}

func (UnimplementedLogServiceHandler) Consume(context.Context, *connect.Request[v1.ConsumeRequest]) (*connect.Response[v1.ConsumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.LogService.Consume is not implemented"))
}

func (UnimplementedLogServiceHandler) ProduceBidiStream(context.Context, *connect.BidiStream[v1.ProduceBidiStreamRequest, v1.ProduceBidiStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.LogService.ProduceBidiStream is not implemented"))
}

func (UnimplementedLogServiceHandler) ConsumeServerStream(context.Context, *connect.Request[v1.ConsumeServerStreamRequest], *connect.ServerStream[v1.ConsumeServerStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("log.v1.LogService.ConsumeServerStream is not implemented"))
}
